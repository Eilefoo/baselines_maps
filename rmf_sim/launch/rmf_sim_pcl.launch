<launch>
  <!-- All settings -->
  <arg name="rosbag_record" value="false"/>
  <arg name="robot_name" default="delta" />
  <arg name="robot_name_collision_check" default="delta_collision_check" />  
  <arg name="gazebo_gui_en" default="true" />
  <arg name="use_sim_time" default="true" />
  <arg name="rviz_en" default="true" />
  <arg name="launch_prefix" default="" />
  <param name="use_sim_time" value="$(arg use_sim_time)" />

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rmf_sim)/models:$(find rmf_sim)/models/SimpleShapes:$(find rmf_sim)/models:$(find rmf_sim)/models/SubT:$(find rmf_sim)/models/SubT/Artifacts:$(find rmf_sim)/models/SubT/CaveCircuit:$(find rmf_sim)/models/SubT/UrbanCircuit:$(find rmf_sim)/models/SubT/TunnelCircuit"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rmf_sim)/models" />
  
  <arg name="world_file" value="$(find rmf_sim)/worlds/random_corridor_denser.world"/> 
  
  <arg name="pci_file" default="$(find gbplanner_pci_m100)/config/planner_control_interface_sim_config.yaml"/>

  <!-- The world scrambler service-->
  <node name="gazebo_env_scrambler" pkg="pointcloud_utils" type="gazebo_env_scrambler.py" output="screen" />

  <!-- Static TF -->
  <node pkg="tf" type="static_transform_publisher" name="tf_53" args="0 0 0 0 0 0 world navigation 100" />
  <node pkg="tf" type="static_transform_publisher" name="tf_1" args="0 0 0 0 0 0 $(arg robot_name)/vi_sensor/base_link fcu 1" />
  <node pkg="tf" type="static_transform_publisher" name="tf_2" args="0.015 0.055 0.0065 -1.57 0.1 -1.57 fcu $(arg robot_name)/vi_sensor/camera_depth_optical_center_link 1" />
  <node pkg="tf" type="static_transform_publisher" name="tf_3" args="0.015 0.055 0.0065 -1.57 0.1 -1.57 fcu $(arg robot_name)/vi_sensor/camera_left_link 1" />
  <node pkg="tf" type="static_transform_publisher" name="tf_4" args="0.015 -0.055 0.0065 -1.57 0.1 -1.57 fcu $(arg robot_name)/vi_sensor/camera_right_link 1" />

  <node pkg="tf" type="static_transform_publisher" name="tf_12" args="0 0 0 0 0 0 $(arg robot_name)/base_link $(arg robot_name)/$(arg robot_name)/os1 10" /> 

  <!-- <node pkg="tf" type="static_transform_publisher" name="tf_1" args="0 0 0 0 0 0 $(arg robot_name)/base_link $(arg robot_name)/$(arg robot_name)/os0 10" />  -->

 
<arg name="voxel_size" default="0.2" />
<arg name="voxels_per_side" default="16" />
<arg name="world_frame" default="$(arg robot_name)/base_link" /> 
<arg name="truncation_distance" default="0.4" />

<!-- Voxblox node-->
<!-- Voxblox node-->
    <node name="tsdf_server" pkg="voxblox_ros" type="tsdf_server" output="screen" args="-alsologtostderr" clear_params="true">
      <remap from="pointcloud" to="/os1_points"/>
      <remap from="voxblox_node/esdf_map_out" to="esdf_map" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="publish_esdf_map" value="false" />
      <param name="publish_tsdf_map" value="true"/>
      <param name="publish_pointclouds" value="true" />
      <param name="publish_tsdf_info" value="true" />
      <param name="use_tf_transforms" value="true" />
      <param name="update_mesh_every_n_sec" value="0.1" />
      <!-- <param name="clear_sphere_for_planning" value="true" /> -->
      <param name="world_frame" value="$(arg world_frame)" />
      <param name="method" value="simple" />
      <param name="intensity_colormap" value="grayscale" />
      <param name="intensity_max_value" value="255"/>
      <param name="max_ray_length_m" value="5" />
      <param name="use_const_weight" value = "true"/> <!--for laserscanners-->
      <param name="esdf_min_diff_m" value="0.1"/>
      <param name="max_weight" value="1" />
      <param name="allow_clear" value="true"/>
      <param name="clear_checks_every_n_frames" value="1"/>
      <param name="truncation_distance" value="$(arg truncation_distance)" />
      <param name="voxel_carving_enabled" value="true"/>
      <param name="max_consecutive_ray_collisions" value="8"/>
      <param name="start_voxel_subsampling_factor" value="8"/>
    </node>

<!-- TSDF_encoder -->
  <node name="TSDF_encoder" pkg="pointcloud_utils" type="TSDF_encoder.py" output="screen">
    <param name="reconstruct_TSDF" value="true"/>
    <param name="publish_distance" value="false"/>
    <param name="publish_bin_entropy" value="false"/>
    <param name="publish_voxels" value="false"/>
    <param name="publish_slice" value="false"/>  <!--reconstruct tsdf needs to be true for this to take effect  -->
    <param name="model_weight_path" value="$(find pointcloud_utils)/models/model_10_random_world/epoch_0256/cp-.ckpt"/>
    <param name="truncation_distance" value="$(arg truncation_distance)" />
    <param name="binarization_threshold" value="0.1" />
   </node>

  <param name="/voxblox_ground_truth/voxel_size" value="0.2" />
  <!-- ROS Gazebo  -->
"
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world_file)" />
    <arg name="gui" value="$(arg gazebo_gui_en)" />
    <arg name="use_sim_time" value="$(arg use_sim_time)" />
    <arg name="paused" value="true" />
    <arg name="verbose" value="false" />
  </include>

  <group ns="$(arg robot_name)">
    <!-- <node name="img_throttler" type="throttle" pkg="topic_tools" args="messages vi_sensor/camera_depth/depth/points 5 vi_sensor/camera_depth/depth/points_throttled" /> -->

    <!-- MAV launch -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg robot_name)" />
      <arg name="model" value="$(find rmf_sim)/rotors/urdf/$(arg robot_name).gazebo" />
      <arg name="enable_ground_truth" value="true" />
      <arg name="x" value="10.0" />
      <arg name="y" value="0.0" />
      <arg name="z" value="0.0" />
    </include>

    <node name="acc_command_converter" pkg="rotors_control" type="acc_command_converter" output="screen">
      <remap from="odometry" to="odometry_sensor1/odometry" /> 
      <param name="use_vehicle_frame" value="true" />
      <param name="use_yaw_stabilize" value="true" />
      <!-- <remap from="command/rate_thrust" to="input_acceleration_topic" /> -->
      <!-- <remap from="command/roll_pitch_yawrate_thrust" to="output_roll_pitch_yawrate_thrust_topic" /> -->
      <param name="eps_explore" value="0.0"/>
      <param name="noise_x" value="0.0"/>
      <param name="noise_y" value="0.0"/>
      <param name="noise_z" value="0.0"/>
      <rosparam command="load" file="$(find rmf_sim)/rotors/$(arg robot_name).yaml" />
      <rosparam command="load" file="$(find rmf_sim)/rotors/pid_position_$(arg robot_name).yaml" />
    </node>

    <!-- RPYrate Thrust controller  -->
    <node name="roll_pitch_yawrate_thrust_controller_node" pkg="rotors_control" type="roll_pitch_yawrate_thrust_controller_node">
      <rosparam command="load" file="$(find rmf_sim)/rotors/roll_pitch_yawrate_thrust_controller_$(arg robot_name).yaml" />
      <rosparam command="load" file="$(find rmf_sim)/rotors/$(arg robot_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>

  </group>

  <group ns="$(arg robot_name_collision_check)">
    <!-- MAV launch -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg robot_name_collision_check)" />
      <arg name="model" value="$(find rmf_sim)/rotors/urdf/$(arg robot_name_collision_check).gazebo" />
      <arg name="enable_ground_truth" value="true" />
      <arg name="x" value="20.0" />
      <arg name="y" value="20.0" />
      <arg name="z" value="0.0" />
    </include> 
    
    <node name="acc_command_converter" pkg="rotors_control" type="acc_command_converter" output="screen">
      <remap from="odometry" to="odometry_sensor1/odometry" /> 
      <param name="use_vehicle_frame" value="false" />
      <param name="use_yaw_stabilize" value="true" /> 
      <!-- <remap from="command/rate_thrust" to="input_acceleration_topic" /> -->
      <!-- <remap from="command/roll_pitch_yawrate_thrust" to="output_roll_pitch_yawrate_thrust_topic" /> -->
      <param name="eps_explore" value="0.0"/>
      <param name="noise_x" value="0.0"/>
      <param name="noise_y" value="0.0"/>
      <param name="noise_z" value="0.0"/>
      <rosparam command="load" file="$(find rmf_sim)/rotors/$(arg robot_name).yaml" />
      <rosparam command="load" file="$(find rmf_sim)/rotors/pid_position_$(arg robot_name).yaml" />
    </node> 

    <!-- RPYrate Thrust controller  -->
    
    <node name="roll_pitch_yawrate_thrust_controller_node" pkg="rotors_control" type="roll_pitch_yawrate_thrust_controller_node">
      <rosparam command="load" file="$(find rmf_sim)/rotors/roll_pitch_yawrate_thrust_controller_$(arg robot_name).yaml" />
      <rosparam command="load" file="$(find rmf_sim)/rotors/$(arg robot_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
  
  </group>

  <!--<include file="$(find rl_planners)/launch/pcl_to_depth_image.launch"/> -->

  <!-- Rviz -->
  <group if="$(arg rviz_en)">
    <node launch-prefix="nice" pkg="rviz" type="rviz" name="rviz" args="-d $(find rmf_sim)/rviz/$(arg robot_name)_sim.rviz" output="screen" />
    <arg name="verbose" value="true" />

  </group>

  <node name="rostopic" pkg="rostopic" type="rostopic" args="pub /delta/goal geometry_msgs/Pose '{position: {x: 0.0, y: 0.0, z: 2.0}, orientation: {x: 0.0, y: 0.0, z: 0.0, w: 1.0}}' -1" />

</launch>